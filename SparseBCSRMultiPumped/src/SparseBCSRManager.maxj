

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.custom.ManagerClock;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationTechnique;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class SparseBCSRManager extends CustomManager {

    private static final String s_gatherKernelName    = "SparseBCSRGatherKernel";
    private static final String s_multiplyKernelName  = "SparseBCSRMultiplyKernel";
    private static final String s_summationKernelName = "SparseBCSRSummationKernel";
    
    private static final int loopLength = 15;

    SparseBCSRManager(SparseBCSREngineParameters params) {
        super(params);

        int R = params.getR();
        int C = params.getC();
    
        KernelBlock k1 = addKernel(new SparseBCSRGatherKernel(makeKernelParameters(s_gatherKernelName), R, C, params.getDepth()));
        KernelBlock k2 = addKernel(new SparseBCSRMultiplyKernel(makeKernelParameters(s_multiplyKernelName), R, C));
        KernelBlock k3 = addKernel(new SparseBCSRSummationKernel(makeKernelParameters(s_summationKernelName), R, C, loopLength));

        ManagerClock clk1 = generateStreamClock("clock1x", params.getFreq());
        ManagerClock clk2 = generateStreamClock("clock2x", params.getFreq() * 2);
        k1.setClock(clk1);
        k2.setClock(clk2);
        k3.setClock(clk1);
        // --- DFELinks --- 
        DFELink indexStream = addStreamFromCPU("index");
        DFELink valueStream = addStreamFromCPU("value");
        DFELink startStream = addStreamFromCPU("start");
        DFELink resultStream= addStreamToCPU("result");

        //// --- Connect DFELinks to kernel block ---
        k1.getInput("index") <== indexStream;
        k1.getInput("value") <== valueStream;
        k3.getInput("start") <== startStream;
        for (int i = 0; i < R; i++) {
            k2.getInput(String.format("inputVector%04d", i)) <== k1.getOutput(String.format("inputVector%04d", i));
            k2.getInput(String.format("valueVector%04d", i)) <== k1.getOutput(String.format("valueVector%04d", i));
            k3.getInput(String.format("product%04d",     i)) <== k2.getOutput(String.format("product%04d",     i));
        }
        resultStream <== k3.getOutput("result");

        createSLiCinterface(modeDefault(R, C));

        //configBuild(params);
    }

    private EngineInterface modeDefault(int R, int C) {
        EngineInterface ei = new EngineInterface();

        InterfaceParam length = ei.addParam("length", CPUTypes.INT);
        InterfaceParam lengthInBytes = length * CPUTypes.FLOAT.sizeInBytes();

        ei.setTicks(s_gatherKernelName,   length / (R * C));
        ei.setTicks(s_multiplyKernelName, length / (R * C) * 2);
        ei.setTicks(s_summationKernelName,length / (R * C));
        ei.setStream("index",   CPUTypes.UINT32,  lengthInBytes);
        ei.setStream("value",   CPUTypes.FLOAT,   lengthInBytes);
        ei.setStream("start",   CPUTypes.UINT32,  lengthInBytes / (R * C));
        ei.setStream("result",  CPUTypes.FLOAT,   lengthInBytes / C);
        return ei;
    }

    public static void main(String[] args) {
        SparseBCSREngineParameters params = new SparseBCSREngineParameters(args);
        SparseBCSRManager manager = new SparseBCSRManager(params);
        
        manager.addMaxFileConstant("R", params.getR());
        manager.addMaxFileConstant("C", params.getC());
        manager.addMaxFileConstant("depth", params.getDepth());
        manager.addMaxFileConstant("freq", params.getFreq());
        manager.build();
    }
}

