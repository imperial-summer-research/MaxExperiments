

import com.maxeler.maxcompiler.v2.build.EngineParameters;
import com.maxeler.maxcompiler.v2.managers.custom.CustomManager;
import com.maxeler.maxcompiler.v2.managers.custom.DFELink;
import com.maxeler.maxcompiler.v2.managers.custom.blocks.KernelBlock;
import com.maxeler.maxcompiler.v2.managers.BuildConfig;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.Effort;
import com.maxeler.maxcompiler.v2.managers.BuildConfig.OptimizationTechnique;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.CPUTypes;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.EngineInterface;
import com.maxeler.maxcompiler.v2.managers.engine_interfaces.InterfaceParam;

class SparseBCSRManager extends CustomManager {

    private static final String s_gatherKernelName = "SparseBCSRGatherKernel";
    private static final int loopLength = 15;

    SparseBCSRManager(SparseBCSREngineParameters params) {
        super(params);

        int R = params.getR();
        int C = params.getC();
    
        KernelBlock k1 = addKernel(
            new SparseBCSRGatherKernel(makeKernelParameters(s_gatherKernelName), 
                                    R, 
                                    C,
                                    params.getDepth())
            );

        config.setDefaultStreamClockFrequency(params.getFreq());
        // --- DFELinks --- 
        DFELink indexStream = addStreamFromCPU("index");
        DFELink valueStream = addStreamFromCPU("value");

        DFELink inputVectorStreams[] = new DFELink [R];
        DFELink valueVectorStreams[] = new DFELink [R];
        for (int i = 0; i < R; i++) {
            inputVectorStreams[i] = addStreamToCPU(String.format("inputVector%04d", i));
            valueVectorStreams[i] = addStreamToCPU(String.format("valueVector%04d", i));
        }

        //// --- Connect DFELinks to kernel block ---
        k1.getInput("index") <== indexStream;
        k1.getInput("value") <== valueStream;
        for (int i = 0; i < R; i++) {
            inputVectorStreams[i] <== k1.getOutput(String.format("inputVector%04d", i));
            valueVectorStreams[i] <== k1.getOutput(String.format("valueVector%04d", i));
        }

        createSLiCinterface(modeDefault(R, C));

        //configBuild(params);
    }

    private EngineInterface modeDefault(int R, int C) {
        EngineInterface ei = new EngineInterface();

        InterfaceParam length = ei.addParam("length", CPUTypes.INT);
        InterfaceParam lengthInBytes = length * CPUTypes.FLOAT.sizeInBytes();

        ei.setTicks(s_gatherKernelName, length / (R * C));
        ei.setStream("index",   CPUTypes.UINT32,  lengthInBytes);
        ei.setStream("value",   CPUTypes.FLOAT,   lengthInBytes);

        for (int i = 0; i < R; i++) {
            ei.setStream(String.format("inputVector%04d", i), CPUTypes.FLOAT, lengthInBytes/R);
            ei.setStream(String.format("valueVector%04d", i), CPUTypes.FLOAT, lengthInBytes/R);
        }

        return ei;
    }

    public static void main(String[] args) {
        SparseBCSREngineParameters params = new SparseBCSREngineParameters(args);
        SparseBCSRManager manager = new SparseBCSRManager(params);
        
        manager.addMaxFileConstant("R", params.getR());
        manager.addMaxFileConstant("C", params.getC());
        manager.addMaxFileConstant("depth", params.getDepth());
        manager.addMaxFileConstant("freq", params.getFreq());
        manager.build();
    }
}

