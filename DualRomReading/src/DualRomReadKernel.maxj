

import com.maxeler.maxcompiler.v0.utils.MathUtils;
import com.maxeler.maxcompiler.v2.kernelcompiler.Kernel;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelParameters;
import com.maxeler.maxcompiler.v2.kernelcompiler.KernelConfiguration;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.CounterChain;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.core.Stream.OffsetExpr;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.memory.Memory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVector;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.composite.DFEVectorType;

class DualRomReadKernel extends Kernel {

    private static int depth = 8192 * 4;
    private static DFEType valueT = dfeFloat(8, 24);
    private static DFEType indexT = dfeUInt(32);
    private static DFEType addrT  = dfeUInt(MathUtils.bitsToAddress(depth));
    private static DFEVectorType<DFEVar> dualIndexT = new DFEVectorType<DFEVar>(indexT, 2);
    private static DFEVectorType<DFEVar> dualValueT = new DFEVectorType<DFEVar>(valueT, 2);

    DualRomReadKernel(KernelParameters parameters, int numPorts) {
        super(parameters);

        DFEVector<DFEVar> dualIndex = io.input("index", dualIndexT);
        DFEVector<DFEVar> dualValue = dualValueT.newInstance(this);
        if (numPorts == 2) {
            // should have less space, but slower
            Memory<DFEVar> ROM  = mem.alloc(valueT, depth);
            ROM.mapToCPU("ROM1");
            dualValue[0]        <== ROM.read(dualIndex[0].cast(addrT));
            dualValue[1]        <== ROM.read(dualIndex[1].cast(addrT));
        } else {
            // should have larger space, but faster
            Memory<DFEVar> ROM1 = mem.alloc(valueT, depth);
            Memory<DFEVar> ROM2 = mem.alloc(valueT, depth);
            ROM1.mapToCPU("ROM1");
            ROM2.mapToCPU("ROM2");
            dualValue[0]        <== ROM1.read(dualIndex[0].cast(addrT));
            dualValue[1]        <== ROM2.read(dualIndex[1].cast(addrT));
        }
        io.output("value", dualValue, dualValueT);
    }
}

